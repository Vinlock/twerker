name: Publish to NPM

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to publish (e.g. 1.2.3)'
        required: true
        type: string

jobs:
  publish:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for proper changelog generation
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          registry-url: 'https://registry.npmjs.org'
      
      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
          
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        
      - name: Build
        run: pnpm run build

      - name: Git config
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'

      - name: Update Version
        id: package-version
        run: |
          # Update package.json with provided version
          cd packages/twerker
          npm version ${{ github.event.inputs.version }} --no-git-tag-version
          
          # Commit the version bump
          git add package.json
          git commit -m "chore: bump version to ${{ github.event.inputs.version }} [skip actions]"
          git push

      - name: Generate commit log
        id: commit-log
        run: |
          # Get last tag or initial commit if no tags exist
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || git rev-list --max-parents=0 HEAD)
          
          # Get commits since last tag/initial commit
          COMMITS=$(git log $LAST_TAG..HEAD --pretty=format:"%h %s")
          echo "commits<<EOF" >> $GITHUB_OUTPUT
          echo "$COMMITS" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Generate release notes with GPT-4
        id: release-notes
        run: |
          COMMITS="${{ steps.commit-log.outputs.commits }}"
          PROMPT="Generate a comprehensive changelog for version ${{ github.event.inputs.version }} based on these git commits:\n\n$COMMITS\n\nFormat the output in markdown with these sections:\n\n## 🚀 Features\n- New features and improvements\n\n## 🐛 Bug Fixes\n- Bug fixes and patches\n\n## 🏗️ Build & Dependencies\n- Build system and dependency changes\n\n## 📚 Documentation\n- Documentation updates\n\nOnly include sections that have relevant changes. Make it user-friendly and informative."
          
          RESPONSE=$(curl https://api.openai.com/v1/chat/completions \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer ${{ secrets.OPENAI_API_KEY }}" \
            -d '{
              "model": "gpt-4",
              "messages": [
                {
                  "role": "user",
                  "content": "'"$PROMPT"'"
                }
              ],
              "temperature": 0.7,
              "max_tokens": 1000
            }')
          
          NOTES=$(echo $RESPONSE | jq -r '.choices[0].message.content')
          
          # Add a header with links
          HEADER="# Twerker v${{ github.event.inputs.version }}\n\n"
          HEADER+="[📦 NPM](https://www.npmjs.com/package/twerker) | "
          HEADER+="[📚 Documentation](https://github.com/dakdevs/twerker#readme) | "
          HEADER+="[💬 Discussions](https://github.com/dakdevs/twerker/discussions)\n\n"
          
          FULL_NOTES="$HEADER$NOTES"
          
          echo "notes<<EOF" >> $GITHUB_OUTPUT
          echo "$FULL_NOTES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ github.event.inputs.version }}
          name: Release v${{ github.event.inputs.version }}
          body: ${{ steps.release-notes.outputs.notes }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
      - name: Publish to NPM
        run: cd packages/twerker && pnpm publish --no-git-checks
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }} 